{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// Load all the required packages/modules\nimport {Logfile} from \"./Logfile\";\nimport * as fs from 'fs';\nimport * as Salesforce from 'ablb-salesforce-2';\n\nconst secrets = require(\"../../../secrets/secrets.js\");\nconst salesforce = new Salesforce(secrets.SF_USER, secrets.SF_PASSWORD);\n\n\nconst FISHER_USER_MATCH = require('./fisher_user_match');\nconst FISHER_CHILDREN_MATCH = require('./fisher_children_match');\nconst FISHER_RECORDS_RECEIVED = require('./fisher_records_received');\nconst FISHER_DISPLAYED_PROFIT = require('./fisher_displayed_profit_check');\nconst CATCH_QUANTITY_CHECK = require('./catch_quantity_check');\n// import * as MONITOR_RECORDS_RECEIVED from './monitor_records_received';\n\nconst email = require('./email');\n\nconst STR_NO_RECORDS_RECEIVED = \"No Records Received - No Further Fisher Tests Run\";\nconst dashline: string = \"-------------------------------------------------\\n\\n\";\nconst INSTA_RUN = true;\n\nlet GLOBAL_LOGFILE: Logfile;\n\n\n\nconst main = () => {\n    // Reset values in logfile\n    GLOBAL_LOGFILE = new Logfile();\n\n    // Create a timestamp in UTC and create master log for tests\n    let timestamp = new Date();\n    GLOBAL_LOGFILE.addLog(\"Salesforce validation job started at: \" + timestamp + \"\\n\\n\");\n\n    // Handle the time period between which the query searches.\n    // If no time period specified default to last 24 hours\n    let currentDate = new Date();\n    let yesterday = new Date();\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    let startDate, endDate;\n\n    // If valid argument are entered set them as the start and end date in the query's of the Tests\n    if (process.argv[2] !== undefined || process.argv[3] !== undefined) {\n        startDate = new Date(process.argv[2]);\n        endDate = new Date(process.argv[3]);\n        startDate = startDate.toISOString();\n        endDate = endDate.toISOString();\n\n        GLOBAL_LOGFILE.addLog(\"Range Date Specified.\\nRunning Tests for records between \"\n            + startDate + \" and \" + endDate + \" (time in UTC)\\n\");\n    }\n    // Else if no date or invalid dates are given as arguments the end date will be set to the current time and the\n    // start date to 24h before the start date. i.e. will run query for last 24 hours\n    else {\n        startDate = yesterday;\n        endDate = currentDate;\n        startDate = startDate.toISOString();\n        endDate = endDate.toISOString();\n\n        console.log(\"debug: start date: \" + startDate);\n        console.log(\"debug: end date: \" + endDate);\n\n        GLOBAL_LOGFILE.addLog(\"No Date Range Specified - Defaulting to the last 24h.\"\n            + \"\\nRunning Tests for records between \" + startDate + \" and \" + endDate + \" (time in +0:00 UTC)\\n\");\n    }\n\n    /**\n     * Create a connection to Salesforce and start running the checks\n     */\n    let client;\n    return salesforce.createConnection()\n        .then(conn => {\n            client = conn;\n            // Fisher tests are run where after email is send\n            fisherTests(client, startDate, endDate)\n        })\n        .then(success => {\n            let finishTime = new Date();\n            let runtime = finishTime.getTime() - timestamp.getTime();\n\n            GLOBAL_LOGFILE.addLog(dashline + \"\\nJob Finished at: \" + finishTime.toISOString() + \"\\n\");\n            GLOBAL_LOGFILE.addLog(\"Job Finished at: \" + finishTime + \"\\n\\n\");\n            GLOBAL_LOGFILE.addLog(\"Summary: \\n\");\n            GLOBAL_LOGFILE.addLog(\"Tests Run: \" + GLOBAL_LOGFILE.getTestsRun() + \"\\n\");\n            GLOBAL_LOGFILE.addLog(\"Tests Failed: \" + GLOBAL_LOGFILE.getFails() + \"\\n\");\n            GLOBAL_LOGFILE.addLog(\"Total Errors: \" + GLOBAL_LOGFILE.getErrors() + \"\\n\");\n            GLOBAL_LOGFILE.addLog(\"Runtime: \" + runtime / 1000 + \" seconds\\n\");\n\n            if (GLOBAL_LOGFILE.getErrors() !== 0) {\n                GLOBAL_LOGFILE.email_subject = `${GLOBAL_LOGFILE.getErrors()} failed tests!`\n            } else {\n                GLOBAL_LOGFILE.email_subject = \"All OK!\"\n            }\n\n            if (GLOBAL_LOGFILE.getStatus() === \"NO_RECORDS_RECEIVED\") {\n                GLOBAL_LOGFILE.email_subject += \" (NO TRIPS RECEIVED)\"\n            }\n\n            email.send_report(GLOBAL_LOGFILE.getLog(), GLOBAL_LOGFILE.email_subject, () => {\n                console.log('Report sent ;)');\n            });\n\n            return Promise.resolve(\"data validation: successfully run\")\n        })\n        .catch(err => {\n            console.log(err);\n            console.log('Could not connect to Salesforce. Exiting...');\n            return Promise.reject(err)\n        });\n}\n\n/**\n * Master fisher test function if records are received run all test else if first test fails\n * no other fisher tests will be run\n * @param client\n * @param startDate\n * @param endDate\n */\nconst fisherTests = (client, startDate, endDate) => {\n    // Setup globals that we'll use at the end\n    console.log(dashline + \"Running fisher records received...\");\n\n    return FISHER_RECORDS_RECEIVED.runTest(client, startDate, endDate)\n        .then(returnedText => {\n            GLOBAL_LOGFILE.incrementTestsRun();\n            GLOBAL_LOGFILE.addLog(returnedText += dashline);\n\n            console.log(dashline + \"Running fisher user match...\");\n            return FISHER_USER_MATCH.runTest(client, startDate, endDate);\n        })\n        .then(result => {\n            createLogEntry(GLOBAL_LOGFILE, result);\n            console.log(dashline + \"\\nRunning fisher children match...\");\n            return FISHER_CHILDREN_MATCH.runTest(client, startDate, endDate);\n        })\n        .then(result => {\n            createLogEntry(GLOBAL_LOGFILE, result);\n            console.log(dashline + \"\\nRunning displayed profit match...\");\n            return FISHER_DISPLAYED_PROFIT.runTest(client, startDate, endDate);\n        })\n        .then(result => {\n            createLogEntry(GLOBAL_LOGFILE, result);\n            console.log(dashline + \"\\nRunning quantity check match...\");\n            return CATCH_QUANTITY_CHECK.runTest(client, startDate, endDate);\n        })\n        .then(result => {\n            createLogEntry(GLOBAL_LOGFILE, result);\n            return Promise.resolve();\n        })\n        .catch(ex => {\n            GLOBAL_LOGFILE.incrementErrors(1);\n            GLOBAL_LOGFILE.incrementTestsRun();\n            GLOBAL_LOGFILE.incrementTestsFailed();\n            GLOBAL_LOGFILE.addLog(ex.toString());\n            GLOBAL_LOGFILE.setStatus(\"NO_RECORDS_RECEIVED\");\n            return Promise.resolve();\n        });\n};\n\nconst createLogEntry= (log: Logfile, result: any) => {\n    let returnedText = result[0];\n    let errors = result[1];\n\n    log.addLog(returnedText);\n    log.addLog(dashline);\n    log.incrementTestsRun();\n    log.incrementErrors(errors);\n};\n\n// function monitorTests(client, log, startDate, endDate, callback) {\n//\n//     MONITOR_RECORDS_RECEIVED.runTest(client, startDate, endDate, returnedText => {\n//         testsRun += 1;\n//         //run other tests\n//         callback(returnedText + dashline)\n//     }, returnedText => {\n//         totalErrors += 1;\n//         testsRun += 1;\n//         testsFailed += 1;\n//\n//         callback(returnedText + \"No Further Monitor Tests Run\\n\\n\" + dashline)\n//     });\n// }\n\nmain();\n\nmodule.exports = {\n    runTests: main\n};"]}