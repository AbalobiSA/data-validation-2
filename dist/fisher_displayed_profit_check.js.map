{"version":3,"sources":["../src/fisher_displayed_profit_check.ts"],"names":[],"mappings":"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","file":"fisher_displayed_profit_check.js","sourcesContent":["let async = require('async');\n\n/**\n * Test that calculates the expected profit from a trip by adding expenses and totaling income from catches\n * and compares whether that is equal to the displayed profit field in the trip record.\n * @param client\n * @param startDate\n * @param endDate\n * @param mainCallback\n */\nconst runTest = (client, startDate, endDate) => {\n\n    return new Promise((resolve, reject) => {\n        let errors = 0;\n        let logString = \"\";\n\n        console.log(\"Test 4: Displayed Profit matches actual profit: \");\n        logString += \"Test 4: Displayed Profit matches actual profit: \\n\";\n\n        // Query all trips within given time period\n        let query = `SELECT Id, num_children_in_sf__c, odk_uuid__c, displayed_profit__c, cost_has__c, cost_bait__c, cost_food__c, cost_fuel__c,\n            cost_harbour_fee__c, cost_oil__c, cost_other_amount__c, cost_transport__c \n            FROM Ablb_Fisher_Trip__c WHERE LastModifiedDate >= ${startDate} AND LastModifiedDate < ${endDate}`;\n        client.query(query, (err, trips) => {\n            console.log(trips.totalSize + ' trip records were received');\n            logString += trips.totalSize + ' trip records were received\\n';\n\n            if (trips.totalSize === 0) {\n                logString += \"No successful trips found.\";\n                return resolve([logString, 0]);\n            }\n\n            async.forEachOf(trips.records, (trip, i, callback) => {\n\n                // Query all catches where parent uuid is that of current trip\n                let query = `SELECT coop_price_type__c, other_price_type__c, coop_price_per_item__c, alloc_coop_number__c, coop_price_per_kg__c,\n                    alloc_coop_weight_kg__c, coop_price_per_crate__c, alloc_coop_crates__c, coop_price_for_total_batch__c,\n                    other_price_per_item__c, alloc_sold_number__c, other_price_per_kg__c, alloc_sold_weight_kg__c,\n                    other_price_per_crate__c, alloc_sold_crates__c, other_price_for_total_batch__c\n                    FROM Ablb_Fisher_Catch__c WHERE odk_parent_uuid__c = '${trip.odk_uuid__c}'`;\n                client.query(query, (err, result) => {\n\n                    if (err) {\n                        resolve([logString, err]);\n                    }\n\n                    if (trip.num_children_in_sf__c === 0) {\n                        // The trip has no catches registered in salesforce so skip\n                        return callback();\n                    }\n\n                    let totalCost = 0;\n                    let totalIncome = 0;\n\n                    for (let i = 0; i < result.records.length; i = i + 1) {\n                        totalIncome += income(result.records[i]);\n                    }\n\n                    // If the trips has any costs calculate the total costs\n                    if (trip.cost_has__c === 'yes') {\n                        totalCost += trip.cost_bait__c;\n                        totalCost += trip.cost_food__c;\n                        totalCost += trip.cost_fuel__c;\n                        totalCost += trip.cost_harbour_fee__c;\n                        totalCost += trip.cost_oil__c;\n                        totalCost += trip.cost_other_amount__c;\n                        totalCost += trip.cost_transport__c\n                    }\n\n                    // Calculate the expected profit for trip\n                    let profit = totalIncome - totalCost;\n\n                    // console.log('-----');\n                    // console.log('INCOME = ' + totalIncome);\n                    // console.log('DISPLAYED PROFIT = ' + trip.displayed_profit__c);\n                    // console.log('CALCULATED PROFIT = ' + profit);\n\n                    // If the profit is not equal to displayed profit flag error and handle all faketrips\n                    if (Math.abs(trip.displayed_profit__c - profit) > 0.001 && !((trip.odk_uuid__c).includes(\"faketrip\"))) {\n                        console.log(\"Error @ sfID \" + trip.Id);\n                        logString += \"Error @ sfID \" + trip.Id + \" https://eu5.salesforce.com/\" + trip.Id + '\\n';\n\n                        errors += 1;\n                    }\n\n                    callback();\n                });\n            }, () => {\n                if (errors === 0) {\n                    console.log(\"0 Errors - Test PASSED \\n\");\n                    logString += \"0 Errors - Test PASSED \\n\";\n                    resolve([logString, errors]);\n                } else {\n                    console.log(errors + \" Errors - Test FAILED \\r\\n\");\n                    logString += errors + \" Errors - Test FAILED \\n\";\n                    resolve([logString, errors]);\n                }\n            });\n        });\n    });\n\n\n}\n\n/**\n * Calculate total income of a catch handling different scenarios for price type\n * @param eachCatch\n * @returns {number}\n */\nfunction income(eachCatch) {\n\n    let total_income = 0;\n\n    // Handle sold to coop\n    switch (eachCatch.coop_price_type__c) {\n        case 'per_item':\n            total_income += eachCatch.coop_price_per_item__c * eachCatch.alloc_coop_number__c;\n            break;\n\n        case 'per_kg':\n            total_income += eachCatch.coop_price_per_kg__c * eachCatch.alloc_coop_weight_kg__c;\n            break;\n\n        case 'per_crate':\n            total_income += eachCatch.coop_price_per_crate__c * eachCatch.alloc_coop_crates__c;\n            break;\n\n        case 'total_batch':\n            total_income += eachCatch.coop_price_for_total_batch__c;\n            break;\n    }\n\n    // Handle sold to other\n    switch (eachCatch.other_price_type__c) {\n        case 'per_item':\n            total_income += eachCatch.other_price_per_item__c * eachCatch.alloc_sold_number__c;\n            break;\n\n        case 'per_kg':\n            total_income += eachCatch.other_price_per_kg__c * eachCatch.alloc_sold_weight_kg__c;\n            break;\n\n        case 'per_crate':\n            total_income += eachCatch.other_price_per_crate__c * eachCatch.alloc_sold_crates__c;\n            break;\n\n        case 'total_batch':\n            total_income += eachCatch.other_price_for_total_batch__c;\n            break;\n    }\n\n    return total_income;\n}\n\nexport default runTest;"]}